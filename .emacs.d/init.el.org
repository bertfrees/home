* Emacs configuration
** Miscellaneous

#+NAME: config
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil
      inhibit-startup-screen t
      ring-bell-function 'ignore
      make-backup-files nil
      auto-save-default nil
      vs-follow-symlinks t
      line-move-visual nil
      mouse-wheel-scroll-amount '(1 ((shift) . 1))
      mouse-wheel-follow-mouse 't)
(xterm-mouse-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "C-x i") 'insert-char)
(global-auto-revert-mode t)
(electric-pair-mode t)

(use-package dired
  :bind (:map dired-mode-map
         (("RET" . dired-find-alternate-file)
          ("^"   . (lambda ()
                     (interactive)
                     (find-alternate-file "..")))))
  :config
  (put 'dired-find-alternate-file 'disabled nil))

(use-package popwin
  :ensure t
  :config (popwin-mode 1))

(use-package undo-tree
  :hook (prog-mode text-mode)
  :init
  (require 'popwin)
  (push '(" *undo-tree*" :width 0.2 :position right) popwin:special-display-config)
  :bind (:map undo-tree-map
         ("C-z" . undo-tree-undo))
  :config (setq undo-tree-auto-save-history nil))

(global-unset-key (kbd "C-z"))

#+END_SRC

** Package manager

#+NAME: config
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(when (not package-archive-contents) ;; to avoid long startup time
                                     ;; to manually update the list, run M-x list-packages and update with U
  (package-refresh-contents))

(package-install 'use-package)
(require 'use-package)
(setq use-package-always-defer t
      use-package-always-ensure nil
      use-package-verbose t)

#+END_SRC

** Theme

#+NAME: config
#+BEGIN_SRC emacs-lisp
;; choose a theme to prevent Emacs from inheriting the background
;; and foreground of the terminal when in tty mode
(load-theme 'leuven)

(require-theme 'modus-themes)

#+END_SRC

** Modifier keys

#+NAME: config
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (progn
    (setq mac-function-modifier      'none
          mac-control-modifier       'control
          mac-command-modifier       'control
          mac-option-modifier        'meta
          mac-right-command-modifier 'super
          mac-right-control-modifier 'none
          mac-right-option-modifier  'none)))

#+END_SRC

** Server

#+NAME: config
#+BEGIN_SRC emacs-lisp
(use-package server
  :demand t
  :config
  (or (server-running-p) (server-start))
  ;; ask to save buffers and kill frame or Emacs
  (defun save-buffers-kill-terminal-or-server-with-confirmation (&optional arg)
    (interactive)
    (if (not (frame-parameter nil 'client))
        ;; if the current frame has no client, kill Emacs
        ;; should normally not happen because we start the server in
        ;; the background (with --daemon)
        (save-buffers-kill-emacs arg)
      (if (and (eq (frame-parameter nil 'client) 'nowait)
               ;; if it's a "nowait" frame ask whether to kill the frame
               ;; and keep Emacs running, or kill Emacs
               (yes-or-no-p "Kill server (y) or kill only this frame (n)?"))
          (save-buffers-kill-emacs)
        ;; if emacsclient was started with a list of files to edit,
        ;; then only ask to save these files
        (server-save-buffers-kill-terminal arg))))
  (global-set-key (kbd "C-x C-c") 'save-buffers-kill-terminal-or-server-with-confirmation))

#+END_SRC

** Git

#+NAME: config
#+BEGIN_SRC emacs-lisp
(use-package password-store
  :ensure t
  :autoload password-store-get)

(use-package magit
  :ensure t
  :commands magit-status
  :custom
  (magit-highlight-whitespace)
  (magit-diff-refine-hunk t)
  (magit-diff-use-overlays t)
  (magit-status-expand-stashes nil)
  (magit-repository-directories '(("/Users/bert/src" . 1)
                                  ("/Users/bert/src/github" . 2)))
  :config
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (add-hook 'magit-section-set-visibility-hook
            (lambda (section)
              (and (not magit-insert-section--oldroot)
                   (let ((type (with-slots (type) section type)))
                     (or (eq type 'untracked)
                         (eq type 'remote)
                         (eq type 'tag)))
                   'hide)))
  (defun magit-use-ivy-to-read-repository (orig-fun &rest args)
    (unwind-protect
        (progn
          (ivy-mode +1)
          (apply orig-fun args))
      (ivy-mode -1)))
  (advice-add 'magit-read-repository :around #'magit-use-ivy-to-read-repository)
  ;; get rsa passphrase from pass
  (defadvice magit-process-password-prompt (around magit-process-rsa-password-prompt (proc string) activate)
    (if (or (string= string "Enter passphrase for key '/home/frees/.ssh/gmail_rsa': ")
            (string= string "Enter passphrase for key '/Users/bert/.ssh/gmail_rsa': "))
        (progn
          (process-send-string proc (concat (password-store-get "ssh-rsa/bertfrees@gmail.com") "\n")))
      ad-do-it)))

#+END_SRC

** Org-mode

#+NAME: config
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :commands (org-mode org-agenda org-capture org-store-link)
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link))
  :config
  (set-face-attribute 'org-document-title nil ':height 1.00)
  (set-face-attribute 'org-drawer nil ':foreground "grey")
  (set-face-attribute 'org-meta-line nil ':foreground "grey")
  (setq org-directory "~/Dropbox/org"
        org-default-notes-file (expand-file-name "todo.org" org-directory)
        org-agenda-files
          `(,org-default-notes-file
            ,(expand-file-name "~/Dropbox/org/roam/agenda.org")
            ,(expand-file-name "~/Dropbox/org/roam/liblouis_work.org")
            ,(expand-file-name "~/Dropbox/org/roam/zaak/work_for_daisy_consortium.org")
            ,(expand-file-name "~/Dropbox/org/roam/zaak/work_for_sbs.org")
            ,(expand-file-name "~/Dropbox/org/roam/zaak/work_for_dedicon.org")
            ,(expand-file-name "~/Dropbox/org/roam/zaak/work_for_braille_autoriteit.org")
            ,(expand-file-name "~/Dropbox/org/roam/zaak/work_for_luisterpuntbibliotheek.org")
            ,(expand-file-name "~/Dropbox/org/roam/zaak/work_for_transkript.org")
            ,(expand-file-name "~/Dropbox/org/roam/betaalagenda.org")
            ,(expand-file-name "~/Dropbox/org/roam/vuilophaling.org")
            ,(expand-file-name "~/Dropbox/org/roam/kamerplanten.org")
            ,(expand-file-name "~/Dropbox/org/roam/zaak/boekhouding.org")
            ,(expand-file-name "~/Dropbox/org/roam/veilingen.org")
            ,(expand-file-name "~/Dropbox/org/pipeline/todo.org")
            ,(expand-file-name "~/Dropbox/org/sbs/todo.org")
            )
        org-startup-folded 'content
        org-cycle-include-plain-lists 'integrate
        org-drawers '("PROPERTIES" "LOGBOOK")
        ;; don't use hard indentation
        org-adapt-indentation nil
        org-src-preserve-indentation t
        org-edit-src-content-indentation 0
        ;; soft indentation can be controlled with https://orgmode.org/manual/Org-Indent-Mode.html
        org-startup-indented t
        org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "DOING(d)" "|" "DONE(v)")
            (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)" "MISSED(m)"))
        org-fontify-done-headline nil
        org-todo-keyword-faces
          '(("TODO" :foreground "red" :weight bold)
            ("NEXT" :foreground "orange" :weight bold)
            ("DOING" :foreground "dodger blue" :weight bold)
            ("DONE" :foreground "lime green" :strike-through t :weight bold)
            ("WAITING" :foreground "red" :weight bold)
            ("HOLD" :foreground "red" :weight bold)
            ("CANCELLED" :foreground "purple" :strike-through t :weight bold)
            ("MISSED" :foreground "purple" :strike-through t :weight bold))
        org-hidden-keywords '(title)
        org-clock-history-length 25
        org-clock-in-switch-to-state 'org-clock-in-switch-to-doing
        org-clock-into-drawer t
        org-clock-out-remove-zero-time-clocks t
        org-clock-out-when-done t
        org-clock-auto-clock-resolution 'when-no-clock-is-running
        org-clock-persist t
        org-clock-report-include-clocking-task t
        org-time-stamp-rounding-minutes '(1 1)
        org-duration-format 'h:mm
        org-agenda-dim-blocked-tasks nil
        org-agenda-compact-blocks t
        org-agenda-span 'week
        org-agenda-log-mode-items '(closed state)
        org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2)
        org-agenda-clock-consistency-checks
          '(:max-duration "10:00"
            :min-duration 0
            :max-gap "0:15"
            :gap-ok-around ("12:30" "13:00" "17:30" "18:00" "4:00")
            :default-face ((:background "orange") (:foreground "black"))
            :overlap-face ((:background "red") (:foreground "white"))
            :gap-face nil
            :no-end-time-face nil
            :long-face nil
            :short-face nil)
        org-agenda-window-setup 'current-window
        org-agenda-tags-column -120
        org-agenda-custom-commands
          '((" " "Agenda"
             ((agenda "" ((org-agenda-span 'day)
                          (org-agenda-prefix-format " %i %?-12t% s")
                          (org-agenda-remove-tags t)))
              nil))))
  (defun org-clock-in-switch-to-doing (kw)
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (when (member (org-get-todo-state) '("TODO" "NEXT"))
        "DOING")))
  (add-hook 'org-mode-hook (lambda () (setq fill-column 100)))
  (defun org-timestamp-at-point-as-utc-time ()
    (interactive)
    (when (org-at-timestamp-p 'lax)
      (message "%s"
               (format-time-string "%H:%M UTC"
                                   (org-time-string-to-time
                                    (apply 'buffer-substring
                                           (flatten-tree (org-in-regexp org-ts-regexp3))))
                                   t))))
  (use-package org-indent
    :config
    (set-face-attribute 'org-indent nil ':background "#e0f4ff")))

(use-package emacsql-sqlite-builtin
  :ensure t)

(use-package org-roam
  :ensure t
  :defer 300
  :after emacsql-sqlite-builtin ;; see https://org-roam.discourse.group/t/org-roam-fails-with-selecting-deleted-buffer-error/3353/9
  :commands (org-roam-capture
             org-roam-buffer-toggle)
  :autoload (org-roam-node-find
             org-roam-node-insert)
  :bind (("C-c n f" . org-roam-node-find-with-ivy)
         ("C-c n i" . org-roam-node-insert-with-ivy)
         ("C-c n c" . org-roam-capture)
         ("C-c n l" . org-roam-buffer-toggle))
  :config
  (setq org-roam-v2-ack t
        org-roam-directory "~/Dropbox/org/roam"
        org-roam-node-display-template "${title:*} ${tags:0} ${refs:0}"
        org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+FILETAGS:\n#+TITLE: ${title}\n")
           :unnarrowed t)))
  (org-roam-db-autosync-enable))

(defun org-roam-node-find-with-ivy ()
  (interactive)
  (unwind-protect
      (progn
        (ivy-mode +1)
        (org-roam-node-find))
    (ivy-mode -1)))
(defun org-roam-node-insert-with-ivy ()
  (interactive)
  (unwind-protect
      (progn
        (ivy-mode +1)
        (org-roam-node-insert))
    (ivy-mode -1)))

(global-set-key (kbd "C-c n f") 'org-roam-node-find-with-ivy)
(global-set-key (kbd "C-c n i") 'org-roam-node-insert-with-ivy)
(global-set-key (kbd "C-c n c") 'org-roam-capture)
(global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)

#+END_SRC

** Selection, completion, navigation
*** Auto-complete

#+NAME: config
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :commands auto-complete-mode
  :config
  (setq-default ac-sources '())
  (setq ac-auto-start nil
        ac-dwim t
        ac-ignore-case t
        ac-menu-height 10
        ac-quick-help-prefer-pos-tip t
        ac-use-quick-help t
        ac-quick-help-height 20
        ac-quick-help-delay 1
        ac-use-comphist nil)
  (ac-set-trigger-key "TAB"))

#+END_SRC

*** Ido

#+NAME: config
#+BEGIN_SRC emacs-lisp
(use-package ido
  :config
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess
        ido-max-prospects 10
        ido-default-file-method 'selected-window
        ido-everywhere t)
  :bind
  (("M-x" . (lambda ()
              (interactive)
              (call-interactively
               (intern
                (ido-completing-read
                 "M-x "
                 (all-completions "" obarray 'commandp)
                 'commandp t nil 'extended-command-history
                 (car extended-command-history))))))
   ;; in addition to the default C-x b, because I often type C-x C-b by accident
   ("C-x C-b" . 'ido-switch-buffer)))

(ido-mode t)

#+END_SRC

*** Ivy

#+NAME: config
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :autoload ivy-mode)

#+END_SRC

*** Find File at Point

Find File at Point (ffap) is a built-in Emacs library that other tools such as Ido makes use of.

#+NAME: config
#+BEGIN_SRC emacs-lisp
(use-package ffap
  :config
  ;; adapted from https://www.emacswiki.org/emacs/FindFileAtPoint:
  (defvar ffap-file-at-point-line-number nil
    "Variable to hold line number from the last `ffap-file-at-point' call.")
  ;; add `[', `]' and `,' to list of characters to include in (ffap-string-at-point)
  (add-to-list 'ffap-string-at-point-mode-alist '(file "--:\\\\${}+<>@-Z_[:alpha:]~*?[]," "{<@" "@>;.,!:}"))
  (defadvice ffap-file-at-point (after ffap-store-line-number activate)
    "Search `ffap-string-at-point' for a line number pattern and
save it in `ffap-file-at-point-line-number' variable."
    (let* ((string (ffap-string-at-point))
           (name
            (or (condition-case nil
                    (and (not (string-match "//" string)) ; foo.com://bar
                         (substitute-in-file-name string))
                  (error nil))
                string))
           (line-number-string
            (and (string-match ":\\(\\([0-9]+\\)\\|\\[\\([0-9]+\\),[0-9]+\\]\\)" name) ; `:line' or `:line:' or `:[line,column]'
                                                                                       ; (but note that the first : after files in rgrep
                                                                                       ; window is actually a ^@)
                 (concat
                  (match-string 2 name)
                  (match-string 3 name))))
           (line-number
            (and line-number-string
                 (string-to-number line-number-string))))
      (if (and line-number (> line-number 0))
          (setq ffap-file-at-point-line-number line-number)
        (setq ffap-file-at-point-line-number nil))))
  (defadvice find-file-at-point (after ffap-goto-line-number activate)
    "If `ffap-file-at-point-line-number' is non-nil goto this line."
    (when ffap-file-at-point-line-number
      (goto-line ffap-file-at-point-line-number)
      (setq ffap-file-at-point-line-number nil)))
  (defadvice ido-find-file (after ido-goto-line-number activate)
    "If `ffap-file-at-point-line-number' is non-nil goto this line."
    (when ffap-file-at-point-line-number
      (goto-line ffap-file-at-point-line-number)
      (setq ffap-file-at-point-line-number nil))))

#+END_SRC

** Cut & paste

#+NAME: config
#+BEGIN_SRC emacs-lisp
(defun interprogram-killring-peek ()
  (shell-command-to-string "/usr/bin/pbpaste"))

(defun interprogram-killring-push (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "killring push" "*Messages*" "/usr/bin/pbcopy")))
  (process-send-string proc text)
  (process-send-eof proc))))

(setq save-interprogram-paste-before-kill t
  interprogram-cut-function 'interprogram-killring-push
  interprogram-paste-function 'interprogram-killring-peek)

#+END_SRC

** Email

#+NAME: config
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "bertfrees@gmail.com"
      user-full-name "Bert Frees"
      mail-user-agent 'mu4e-user-agent)

(global-unset-key (kbd "C-x m"))

(use-package smtpmail
  :demand t
  :config
  (setq smtpmail-stream-type 'ssl
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 465)
  (use-package message
    :config
    (setq message-send-mail-function 'smtpmail-send-it
          message-kill-buffer-on-exit t
          message-signature nil)))

(use-package mu4e
  :load-path "/opt/homebrew/Cellar/mu/1.12.4/share/emacs/site-lisp/mu/mu4e"
  :commands mu4e
  :bind ((("C-x m u"     . mu4e)
          ("C-x µ"       . mu4e)
          ("C-x m C"     . compose-mail))
         :map mu4e-headers-mode-map
         ("t"            . mu4e-headers-mark-for-tag)
         ("d"            . mu4e-headers-mark-for-tag-as-trash)
         ("<backspace>"  . mu4e-headers-mark-for-tag-as-trash)
         ("D"            . mu4e-headers-mark-for-delete-permanently)
         ("<delete>"     . mu4e-headers-mark-for-delete-permanently)
         ("<deletechar>" . mu4e-headers-mark-for-delete-permanently)
         ("*"            . mu4e-headers-mark-for-star)
         ("o"            . mu4e-headers-mark-for-unstar)
         ("a"            . mu4e-headers-mark-for-archive)
         ("i"            . mu4e-headers-mark-for-inbox)
         ("?"            . mu4e-headers-mark-for-unread)
         ("x"            . mu4e-mark-execute-all-no-confirmation)
         ("m"            . nil)
         ("+"            . nil)
         ("-"            . nil)
         :map mu4e-compose-minor-mode-map
         ("R"            . mu4e-compose-wide-reply)
         ("W"            . nil)
         :map mu4e-view-mode-map
         ("W"            . mu4e-view-show-in-thread)
         ("t"            . mu4e-view-mark-for-tag)
         ("d"            . mu4e-view-mark-for-tag-as-trash)
         ("<backspace>"  . mu4e-view-mark-for-tag-as-trash)
         ("D"            . mu4e-view-mark-for-delete-permanently)
         ("<delete>"     . mu4e-view-mark-for-delete-permanently)
         ("<deletechar>" . mu4e-view-mark-for-delete-permanently)
         ("a"            . mu4e-view-mark-for-archive)
         ("m"            . nil)
         ("+"            . nil)
         ("-"            . nil)
         ("C-c C-o"      . mu4e--view-browse-url-from-binding)
         :map mu4e-search-minor-mode-map
         ("/"            . mu4e-search-narrow-with-auto-complete)
         )
  :config
  (setq mu4e-get-mail-command "offlineimap"
        mu4e~update-buffer-height 10
        mu4e-hide-index-messages t
        mu4e-action-tags-header "X-Keywords"
        mu4e-trash-folder "/trash"
        mu4e-sent-folder "/sent"
        mu4e-drafts-folder "/drafts"
        mu4e-attachment-dir "~/Desktop"
        mu4e-sent-messages-behavior 'delete
        mu4e-decryption-policy 'ask
        mu4e-use-fancy-chars t
        mu4e-search-include-related nil
        mu4e-headers-show-threads t
        mu4e-headers-date-format "%d %b"
        mu4e-headers-time-format "%H:%M"
        mu4e-headers-fields '((:human-date . 7)
                              (:from . 25)
                              (:subject . 68)
                              (:tags))
        mu4e-confirm-quit nil)
  (defvar mailinglists-to-ignore '("accessibility@global.libreoffice.org" ;; FIXME: unsubscribe
                                   "transition-to-accessible-epub@mail.daisy.org"
                                   "xproc-dev@w3.org"))
  (setq gmail-labels '("Mailboxen"              ("bert.frees@sbs.ch"                             "#00BFFF"
                                                   "bert@sonuwe.com"                               "#C39EF0"
                                                   "bertfrees@gmail.com"                           "#FFAC26"
                                                   "bertfrees@hotmail.com"                         "#FF6EC3"
                                                   "bertfrees@openoffice.org"                      nil
                                                   "bertfrees@users.sourceforge.net"               nil)
                         "Mailinglijsten"         ("brailleblaster@freelists.org"                  nil
                                                   "brailleutils@googlegroups.com"                 nil
                                                   "daisymfc-developer@lists.sourceforge.net"      "#0982B3"
                                                   "daisy-pipeline@mail.daisy.org"                 "#0982B3"
                                                   "daisy-pipeline-braille@googlegroups.com"       "#0982B3"
                                                   "daisy-pipeline-dev@googlegroups.com"           "#0982B3"
                                                   "ebraille@daisylists.org"                       "#58BAE0"
                                                   "liblouis-liblouisxml@freelists.org"            "#EBCC1E"
                                                   "libreoffice@lists.freedesktop.org"             nil
                                                   "odt2braille-develop@lists.sourceforge.net"     "#FF4000"
                                                   "technical-developments@mail.daisy.org"         nil
                                                   "transition-to-accessible-epub@mail.daisy.org"  nil
                                                   "xproc-dev@w3.org"                              nil)
                         "Tags"                   ("accessodf"                                     "#FF4000"
                                                   "ebraille"                                      "#58BAE0"
                                                   "jobs"                                          nil
                                                   "liblouis"                                      "#EBCC1E"
                                                   "odt2braille"                                   "#FF4000"
                                                   "odt2daisy"                                     nil
                                                   "pipeline"                                      "#0982B3"
                                                   "refile"                                        nil
                                                   "sbs"                                           "#00BFFF"
                                                   "snaekobbi"                                     "#23CC72"
                                                   "ties"                                          nil
                                                   "zaak"                                          nil)
                         "Github notifications"   (nil                                             nil)
                         "Archieven"              ("aegis"                                         nil
                                                   "alternate.textbooks@dsv.kuleuven.be"           nil
                                                   "bert.frees@esat.kuleuven.be"                   nil
                                                   "kuleuven"                                      nil)))
  (let ((face 'gmail-label-default-face))
    (make-face face)
    (set-face-attribute face nil ':slant 'italic)
    (set-face-attribute face nil ':foreground "#B0B0B0"))
  (require 'cl-lib)
  (cl-loop for (superlabel sublabels) on gmail-labels by #'cddr do
    (cl-loop for (sublabel colors) on sublabels by #'cddr do
      (let* ((label (if sublabel (concat superlabel "/" sublabel) superlabel))
             (face (intern (format "gmail-label-%s-face" (string-replace " " "-" label))))
             (foreground (if (listp colors) (car colors) colors))
             (background (if (listp colors) (cdr colors))))
        (make-face face)
        (set-face-attribute face nil ':weight 'bold)
        (set-face-attribute face nil ':foreground (or foreground "#B0B0B0"))
        (when background (set-face-attribute face nil ':background background)))))
  (setq mu4e-github-notifications-query
        "from:notifications@github.com AND maildir:/all AND NOT tag:\\\\Trash AND NOT tag:Github\\ Notifications/trash")
  (setq mu4e-bookmarks `(("tag:\\\\Inbox AND maildir:/all AND NOT tag:\\\\Trash"                             "Inbox"                ?i)
                         (,(concat "flag:unread AND maildir:/all AND NOT tag:\\\\Trash"
                                   " AND NOT tag:Github\\ notifications/trash"
                                   (string-join (mapcar (lambda (x) (concat " AND NOT tag:Mailinglijsten/" x))
                                                        mailinglists-to-ignore)
                                                ""))                                                         "Unread"               ?u)
                         (,mu4e-github-notifications-query                                                   "Github notifications" ?g)
                         (,(concat "maildir:/all AND NOT tag:\\\\Trash"
                                   " AND NOT tag:Github\\ Notifications/trash AND ("
                                   (string-join '("tag:Mailinglijsten/liblouis-liblouisxml@freelists.org"
                                                  "tag:Tags/liblouis")
                                                " OR ")
                                    ")")                                                                     "Liblouis"             ?l)
                         (,(concat "maildir:/all AND NOT tag:\\\\Trash"
                                   " AND NOT tag:Github\\ Notifications/trash AND ("
                                   (string-join '("tag:Mailinglijsten/daisy-pipeline-dev@googlegroups.com"
                                                   "tag:Mailinglijsten/daisy-pipeline@mail.daisy.org"
                                                   "tag:Tags/pipeline")
                                                 " OR ")
                                    ")")                                                                     "DAISY Pipeline"       ?p)
                         (,(concat "date:today..now AND maildir:/all AND NOT tag:\\\\Trash"
                                   " AND NOT tag:Github\\ Notifications/trash"
                                   (string-join (mapcar (lambda (x) (concat " AND NOT tag:Mailinglijsten/" x))
                                                        mailinglists-to-ignore)
                                                ""))                                                         "Today's messages"     ?t)
                         (,(concat "date:7d..now AND maildir:/all AND NOT tag:\\\\Trash"
                                   " AND NOT tag:Github\\ Notifications/trash"
                                   (string-join (mapcar (lambda (x) (concat " AND NOT tag:Mailinglijsten/" x))
                                                        mailinglists-to-ignore)
                                                ""))                                                         "Last 7 days"          ?w)
                         ("maildir:/sent OR tag:\\\\Sent"                                                    "Sent"                 ?s)
                         ("tag:\\\\Starred"                                                                  "Starred"              ?*)
                         ("maildir:/trash OR tag:\\\\Trash OR tag:Github\\ Notifications/trash"              "Trash"                ?d)))
  ;; check that all messages have tags
  (add-to-list 'mu4e-bookmarks
    (list (let (labels)
            (cl-loop for (superlabel sublabels) on gmail-labels by #'cddr do
              (cl-loop for sublabel in sublabels by #'cddr
                       unless (and (string= superlabel "Mailboxen")
                                   (not (member sublabel '("bert.frees@sbs.ch")))) do
                (add-to-list 'labels (if sublabel (concat superlabel "/" sublabel) superlabel) t)))
            (concat "maildir:/all AND NOT tag:\\\\Inbox AND NOT tag:\\\\Trash AND NOT tag:Github\\ notifications/trash"
                    (string-join (mapcar (lambda (x) (concat " AND NOT tag:" (string-replace " " "\\ " x)))
                                         labels) "")))
          "Untagged"
          ?-)
    t)
  (custom-set-faces
   '(mu4e-replied-face ((t nil)))
   '(mu4e-trashed-face ((t nil)))
   '(mu4e-draft-face ((t nil)))
   '(mu4e-unread-face ((t (:weight bold))))
   '(mu4e-header-highlight-face ((t (:inherit hl-line :underline t))))
   '(mu4e-flagged-face ((t nil)))
   '(mu4e-replied-face ((t nil)))
   '(mu4e-forwarded-face ((t nil)))
   '(mu4e-header-face ((t nil)))
   '(mu4e-thread-fold-face ((t (:background "#e0f4ff"))))
   '(gnus-header ((t nil)))
   )
  ;; auto-completion for search query
  (defadvice mu4e-search (before mu4e-search-setup-auto-complete
                                 (&optional expr prompt edit ignore-history msgid show)
                                 activate)
    (unless expr
      (add-hook 'minibuffer-setup-hook 'mu4e-search-minibuffer-setup)
      (add-hook 'minibuffer-exit-hook 'mu4e-search-minibuffer-exit)))
  (defun mu4e-search-narrow-with-auto-complete ()
    (interactive)
    (add-hook 'minibuffer-setup-hook 'mu4e-search-minibuffer-setup)
    (add-hook 'minibuffer-exit-hook 'mu4e-search-minibuffer-exit)
    (mu4e-search-narrow (mu4e-search-read-query (mu4e-format "Narrow down to: "))))
  (defun mu4e-search-minibuffer-setup ()
    (setq-local ac-sources '(ac-source-mu4e-search-from-to
                             ac-source-mu4e-search-tag
                             ac-source-mu4e-search-flag))
    (setq-local ac-menu-height 3)
    (setq-local ac-quick-help-height 3)
    (auto-complete-mode t))
  (defun mu4e-search-minibuffer-exit ()
    (remove-hook 'minibuffer-setup-hook 'mu4e-search-minibuffer-setup)
    (remove-hook 'minibuffer-exit-hook 'mu4e-search-minibuffer-exit))
  (use-package auto-complete
    :config
    (ac-define-source mu4e-search-from-to
      '((prefix     . "\\(?:from:\\|to:\\)\\(\\(\\w\\|[\\.@_-]\\)+\\)")
        (candidates . (lambda ()
                        (let (keys)
                          (maphash (lambda (k v) (push k keys)) mu4e--contacts-set)
                          keys)))
        (match      . (lambda (prefix candicates)
                        (mapcar (lambda (contact)
                                  (if (string-match "<\\(.+\\)>" contact)
                                      (match-string 1 contact)
                                    contact))
                                (ac-match-substring prefix candicates))))
        (document   . (lambda (address)
                        (let ((address-regexp (concat "<" (regexp-quote address) ">"))
                              (contacts (let (keys)
                                          (maphash (lambda (k v) (push k keys)) mu4e--contacts-set)
                                          keys))
                              contact)
                          (while (and contacts (not contact))
                            (setq contact (car contacts))
                            (setq contacts (cdr contacts))
                            (when (not (string-match address-regexp contact))
                              (setq contact nil)))
                          (setq contact (or contact address)))))
        (cache)))
    (ac-define-source mu4e-search-tag
      '((prefix     . "\\(?:tag:\\)\\(\\(\\w\\|/\\)+\\)")
        (candidates . (lambda () (let ((labels (list "\\\\Inbox" "\\\\Sent" "\\\\Trash" "\\\\Important" "\\\\Starred")))
                                   (cl-loop for (superlabel sublabels) on gmail-labels by #'cddr do
                                     (cl-loop for sublabel in sublabels by #'cddr do
                                       (add-to-list 'labels (string-replace " " "\\ "
                                                                            (if sublabel
                                                                                (concat superlabel "/" sublabel)
                                                                              superlabel)) t)))
                                   labels)))
        (match      . substring)
        (cache)))
    (ac-define-source mu4e-search-flag
      '((prefix     . "\\(?:flag:\\)\\(\\(\\w\\|/\\)+\\)")
        (candidates . '("attach" "draft" "flagged" "list" "new" "passed" "replied"
                        "seen" "trashed" "unread" "encrypted" "signed" "personal"))
        (match      . substring)
        (cache))))
  (defface gmail-label-starred-face
    '((t :inherit default :foreground "#A370E0" :family "monospace" :height 0.85)) nil)
  (defface gmail-label-unstarred-face
    '((t :inherit default :foreground "#DDDDDD" :family "monospace" :height 0.85)) nil)
  (defun mu4e-display-tags (tags)
    (string-join
      (append
        `(,(if (member "\\Starred" tags)
               (propertize "★" 'face 'gmail-label-starred-face)
             (propertize "☆" 'face 'gmail-label-unstarred-face)))
        (delq nil
          (mapcar
            (lambda (tag)
              (let ((short-tag
                     (cond ((string-match "^\\\\\\(Inbox\\|Sent\\|Trash\\)$" tag)
                            (match-string 1 tag))
                           ((string-match "^\\(Mailboxen/[^@]+\\)\\(@.+\\)$" tag)
                            (match-string 2 tag))
                           ((string-match "^\\(Tags\\|Mailinglijsten\\|Archieven\\)/\\(.+\\)$" tag)
                            (match-string 2 tag))
                           ((string-match "^Github notifications$" tag)
                            "github")
                           ((string-match "^Github notifications/trash$" tag)
                            "Trash"))))
                (when short-tag
                  (let* ((face (intern (format "gmail-label-%s-face" (string-replace " " "-" tag))))
                         (face (if (facep face) face 'gmail-label-default-face)))
                    (propertize short-tag 'face face)))))
            tags)))
      " "))
  (defvar mu4e-mark-retag-arg nil)
  (defadvice mu4e-mark-execute-all (before mu4e-mark-prompt-retag-arg activate)
    (let (marked-for-tag)
      (maphash (lambda (docid val)
                 (let ((mark (car val)))
                   (when (eql mark 'tag)
                     (setq marked-for-tag t))))
               mu4e--mark-map)
      (when marked-for-tag
        (add-hook 'minibuffer-setup-hook 'mu4e-tag-minibuffer-setup)
        (add-hook 'minibuffer-exit-hook 'mu4e-tag-minibuffer-exit)
        (setq mu4e-mark-retag-arg (read-string "Tags for marked messages: ")))))
  (defun mu4e-tag-minibuffer-setup ()
    (setq-local ac-sources '(ac-source-mu4e-tag))
    (setq-local ac-menu-height 3)
    (setq-local ac-quick-help-height 3)
    (auto-complete-mode t)
    (insert "+"))
  (defun mu4e-tag-minibuffer-exit ()
    (remove-hook 'minibuffer-setup-hook 'mu4e-tag-minibuffer-setup)
    (remove-hook 'minibuffer-exit-hook 'mu4e-tag-minibuffer-exit))
  (defun mu4e-mark-execute-all-no-confirmation ()
    (interactive)
    (mu4e-mark-execute-all t))
  (use-package auto-complete
    :config
    (ac-define-source mu4e-tag
      '((prefix     . "\\(?:[\\+\\-]\\)\\(\\(\\w\\|[\\\\/]\\)+\\)")
        (candidates . (lambda () (let ((labels (list "\\Inbox" "\\Trash" "\\Important")))
                                   (cl-loop for (superlabel sublabels) on gmail-labels by #'cddr do
                                     (cl-loop for sublabel in sublabels by #'cddr do
                                       (add-to-list 'labels (string-replace " " "\\ "
                                                                            (if sublabel
                                                                                (concat superlabel "/" sublabel)
                                                                              superlabel)) t)))
                                   labels)))
        (match      . substring)
        (cache))))
  (defun mu4e-tag-message (docid msg target)
    (mu4e-action-retag-message msg mu4e-mark-retag-arg))
  (defun mu4e-trash-message (docid msg target)
    (let ((maildir (mu4e-message-field msg :maildir)))
      (if (string= maildir "/all")
          (if (member "Github notifications" (mu4e-message-field msg :tags))
              (if (not (member 'seen (mu4e-message-field msg :flags)))
                  (mu4e-action-retag-message msg "-Github notifications,+Github notifications/trash")
                (mu4e-action-retag-message msg "+\\Trash"))
            (if (member "Github notifications/trash" (mu4e-message-field msg :tags))
                (mu4e-action-retag-message msg "-Github notifications/trash,+Github notifications,+\\Trash")
              (mu4e-action-retag-message msg "+\\Trash")))
        (when (string= maildir "/trash")
          (mu4e--server-remove docid)))))
  (defun mu4e-star-message (docid msg target)
    (mu4e-action-retag-message msg "+\\Starred"))
  (defun mu4e-archive-message (docid msg target)
    (mu4e-action-retag-message msg "-\\Inbox,-\\Trash,-Github notifications/trash"))
  (defun mu4e-move-message-to-inbox (docid msg target)
    (mu4e-action-retag-message msg "+\\Inbox,-\\Trash,-Github notifications/trash"))
  (defun mu4e-delete-message-permanently (docid msg target)
    (let ((maildir (mu4e-message-field msg :maildir)))
      (when (string= maildir "/trash")
        (mu4e--server-remove docid))))
  (setq mu4e-marks
    (append mu4e-marks
            '((tag
               :char "t"
               :prompt "tag"
               :show-target (lambda (target) "tag")
               :action mu4e-tag-message)
              (tag-as-trash
               :char "d"
               :prompt "dtrash"
               :show-target (lambda (target) "trash")
               :action mu4e-trash-message)
              (star
               :char "*"
               :prompt "*star"
               :show-target (lambda (target) "star")
               :action mu4e-star-message)
              (archive
               :char "a"
               :prompt "archive"
               :show-target (lambda (target) "archive")
               :action mu4e-archive-message)
              (inbox
               :char "i"
               :prompt "iMove to inbox"
               :show-target (lambda (target) "inbox")
               :action mu4e-move-message-to-inbox)
              (delete-permanently
               :char "D"
               :prompt "Ddelete"
               :show-target (lambda (target) "delete")
               :action mu4e-delete-message-permanently))))
  (mu4e~headers-defun-mark-for tag)
  (mu4e~headers-defun-mark-for tag-as-trash)
  (mu4e~headers-defun-mark-for star)
  (mu4e~headers-defun-mark-for archive)
  (mu4e~headers-defun-mark-for inbox)
  (mu4e~headers-defun-mark-for delete-permanently)
  (mu4e--view-defun-mark-for tag)
  (mu4e--view-defun-mark-for tag-as-trash)
  (mu4e--view-defun-mark-for delete-permanently)
  (mu4e--view-defun-mark-for archive)
  (defun mu4e-view-show-in-thread ()
    (interactive)
    (let ((mu4e-search-include-related t))
      (mu4e-search (format "msgid:%s" (mu4e-message-field-at-point :message-id)))))

(use-package mm-decode
  :config
  (add-to-list 'mm-discouraged-alternatives "text/html")
  (add-to-list 'mm-discouraged-alternatives "text/richtext"))

(use-package mu4e-compose
  :config
  (setq mu4e-compose-complete-addresses t
        mu4e-compose-complete-only-personal nil
        mu4e-compose-complete-only-after "2012-02-01"
        mu4e-compose-complete-ignore-address-regexp "not?-?reply"))

#+END_SRC

** IRC and Slack

#+NAME: config
#+BEGIN_SRC emacs-lisp
(use-package erc-terminal-notifier
  :ensure t
  )

(use-package erc
  :commands (libera-chat bitlbee erc-all)
  :config
  (require 'erc-services)
  (require 'erc-terminal-notifier)
  (setq erc-server "localhost"
        erc-server-history-list '("localhost"
                                  "irc.libera.chat")
        erc-nick '("bert" "bfrees")
        erc-nickserv-identify-mode 'both
        erc-autojoin-channels-alist
          '(("Libera.Chat" "#liblouis")
            ;"BitlBee" ... ;; autojoins for BitlBee are handled by BitlBee itself
            ))
  (defun libera-chat ()
    (interactive)
    (erc-tls :server "irc.libera.chat" :port 6697 :nick "bfrees"))
  (defun bitlbee ()
    (interactive)
    (when (not (get-buffer-process "*bitlbee*"))
      (start-process "bitlbee" "*bitlbee*"
                     (expand-file-name "../bin/bitlbee" user-emacs-directory) "-Fn"))
    (erc :server "localhost" :port 6667 :nick "bert"))
  (defun erc-all ()
    (interactive)
    (libera-chat)
    (bitlbee)))

#+END_SRC

** Programming
*** XML

#+NAME: config
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.xml$"   . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.xhtml$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.xsd$"   . nxml-mode))

(use-package nxml-mode
  :autoload nxml-mode
  :config
  (setq-default nxml-child-indent 4)
  (setq nxml-slash-auto-complete-flag t)
  (push (expand-file-name "schema/schemas.xml" user-emacs-directory) rng-schema-locating-files)
  (add-to-list 'hs-special-modes-alist
    '(nxml-mode "<!--\\|<[^/>]>\\|<[^/][^>]*[^/]>"
                ""
                "<!--"
                nxml-forward-sexp
                nil))
  (add-hook 'nxml-mode-hook
    (lambda () (local-set-key (kbd "TAB") 'nxml-indent-or-toggle-hiding-or-expand-or-complete)
               (local-set-key (kbd "RET") 'nxml-newline-and-indent-maybe-auto-newline)
               (local-set-key ">" 'nxml-electric-gt)
               (local-set-key (kbd "C-<up>") 'nxml-backward-element)
               (local-set-key (kbd "C-<down>") 'nxml-forward-element)
               (setq-local ac-sources '(ac-source-nxml-tag
                                        ac-source-nxml-attr
                                        ac-source-nxml-attr-value))
               (auto-complete-mode t)
               (auto-complete-nxml-init-project)
               (hs-minor-mode)))
  (defun nxml-forward-sexp (arg)
    (let ((nxml-sexp-element-flag))
      (setq nxml-sexp-element-flag (not (looking-at "<!--")))
      (unless (looking-at "[*]+")
        (condition-case nil
            (nxml-forward-balanced-item arg)
          (error nil)))))
  (defun try-indent ()
    (if (use-region-p)
        (progn
          (indent-region (region-beginning) (region-end))
          t)
      (let* ((point-before-indent (point)))
        (indent-according-to-mode)
        (not (and (equal point-before-indent (point))
                  (not mark-active))))))
  (defun fallback-command (&optional except-command)
    (let* ((saved-local-map (current-local-map)))
      (use-local-map nil)
      (setq unread-command-events
            (append (this-single-command-raw-keys)
                    unread-command-events))
      (let* ((key (read-key-sequence-vector ""))
             (command (and key (key-binding key))))
        (when (and (commandp command)
                   (not (eq command 'except-command)))
          (setq this-command command)
          (call-interactively command))
        (use-local-map saved-local-map))))
  (defun nxml-try-toggle-hiding ()
    (if (hs-already-hidden-p)
      (progn
        (hs-show-block)
        (hs-find-block-beginning)
        t)
      (progn
        (nxml-token-after)
        (when (or (and (eq xmltok-type 'start-tag)
                       (< (- (point) xmltok-start 1) (length (xmltok-start-tag-qname))))
                  (and (eq xmltok-type 'comment)
                       (< (- (point) xmltok-start) 4)))
          (goto-char xmltok-start)
          (hs-hide-block)
          (hs-find-block-beginning)
          t))))
  (defun nxml-indent-or-toggle-hiding-or-expand-or-complete ()
    (interactive)
    (unless (try-indent)
      (unless (nxml-try-toggle-hiding)
        (fallback-command 'nxml-indent-or-toggle-hiding-or-expand-or-complete))))
  (defun nxml-newline-and-indent-maybe-auto-newline ()
    (interactive)
    (nxml-ensure-scan-up-to-date)
    (if (and (not (nxml-get-inside (point)))
             (eq (point) (nxml-scan-element-backward (point) t))
             (looking-at (concat "</" (xmltok-start-tag-qname) ">")))
        (progn
          (newline)
          (save-excursion (newline))
          (nxml-indent-line)
          (save-excursion (forward-char)
                          (nxml-indent-line)))
      (newline)
      (nxml-indent-line)))
  (defun nxml-electric-gt ()
    (interactive)
    (nxml-ensure-scan-up-to-date)
    (insert ">")
    (if (and (eq (nxml-token-before) (point))
             (eq xmltok-type 'start-tag))
        (save-excursion
          (insert (concat "</" (xmltok-start-tag-qname) ">")))))
  (defun nxml-electric-slash (arg)
    (interactive "*P")
    (nxml-ensure-scan-up-to-date)
    (let* ((slash-pos (point))
           (end-tag-p (and (eq (char-before slash-pos) ?<)
                           (not (nxml-get-inside slash-pos))))
           (at-indentation (save-excursion
                             (back-to-indentation)
                             (eq (point) (1- slash-pos)))))
      (self-insert-command (prefix-numeric-value arg))
      (unless arg
        (if nxml-slash-auto-complete-flag
            (if end-tag-p
                (condition-case err
                    (let ((start-tag-end
                           (nxml-scan-element-backward (1- slash-pos) t)))
                      (when start-tag-end
                        (insert (xmltok-start-tag-qname) ">")))
                  (nxml-scan-error nil))
              (if (and (eq (nxml-token-before) (point))
                       (eq xmltok-type 'partial-empty-element))
                  (insert ">")
                (when (and (eq (nxml-token-before) (1+ (point)))
                           (eq xmltok-type 'empty-element))
                  (forward-char)
                  (when (looking-at (concat "[\s\t\n]*</" (xmltok-start-tag-qname) ">"))
                    (while (looking-at "[\s\t\n]")
                      (delete-char 1))
                    (delete-char (+ 3 (length (xmltok-start-tag-qname)))))))))
        (when (and end-tag-p at-indentation)
          (nxml-indent-line)))))
  (defun nxml-pretty-print-region (begin end)
    (interactive "r")
    (when (string-equal major-mode "nxml-mode")
      (save-excursion
        (goto-char begin)
        (while (search-forward-regexp "\>[ \\t]*\<" nil t)
          (backward-char) (insert "\n"))
        (indent-region begin end))))) 

(use-package auto-complete-nxml
  :ensure t
  :autoload auto-complete-nxml-init-project
  :config
  (remove-hook 'nxml-mode-hook 'auto-complete-nxml-setup))

** Shell

See also [[file:../.zshrc.org][.zshrc]]

#+NAME: config
#+BEGIN_SRC emacs-lisp
(defun vterm-buffer-for-directory (&optional directory)
  (let* ((directory (or directory default-directory))
         (directory (expand-file-name directory))
         (buf (if current-prefix-arg
                  nil ;; create new buffer if current-prefix-arg is set
                (progn
                  (require 'cl-lib)
                  (cl-loop for b in (match-buffers '(major-mode . vterm-mode))
                           when (string= directory (expand-file-name
                                                    (buffer-local-value 'default-directory b)))
                           return b))))
         (buf (or buf
                  (let ((default-directory directory))
                    (vterm)))))
    (with-current-buffer buf
      (vterm-dark-theme)) ;; Note that vterm-dark-theme is already applied in vterm-mode-hook,
                          ;; but vterm-mode-hook does not seem te be executed when vterm is
                          ;; started through initial-buffer-choice. Also, for some reason,
                          ;; vterm-dark-theme is not applied correctly to the very first vterm
                          ;; buffer (when the daemon is started), so call it again when
                          ;; emacsclient connects (and every time vterm-buffer-for-directory is
                          ;; called).
    buf))

(defun switch-to-vterm-buffer-for-directory (&optional directory)
  (interactive)
  (switch-to-buffer (vterm-buffer-for-directory directory)))

(setq initial-buffer-choice #'vterm-buffer-for-directory)

;;     C-x !: switch to vterm buffer for current directory
;; C-u C-x !: create new vterm buffer for current directory
(global-set-key (kbd "C-x !") 'switch-to-vterm-buffer-for-directory)

(use-package vterm
  :ensure t
  :autoload vterm--internal
  :bind (:map vterm-mode-map
         ("C-c C-p" . vterm-copy-mode)
         :map vterm-copy-mode-map
         ("C-c C-p" . vterm-copy-mode-done))
  :config
  (setq vterm-buffer-name-string "vterm %s")
  (defun vterm-dark-theme ()
    "Dark theme for vterm buffers."
    (ignore-errors
      (unless (color-dark-p (mapcar (lambda (c) (/ c 65535.0))
                                    (color-values (background-color-at-point))))
        (require 'theme-anchor)
        (theme-anchor-buffer-local 'modus-vivendi))))
  (add-hook 'vterm-mode-hook #'vterm-dark-theme)
  (defvar vterm-execute-buffer nil)
  (defun vterm-execute-region-or-current-line ()
    "Insert text of current line in vterm and execute."
    (interactive)
    (require 'vterm)
    (eval-when-compile (require 'subr-x))
    (let ((command (if (region-active-p)
                       (string-trim (buffer-substring
                                     (save-excursion (region-beginning))
                                     (save-excursion (region-end))))
                     (string-trim (buffer-substring (save-excursion
                                                      (beginning-of-line)
                                                      (point))
                                                    (save-excursion
                                                      (end-of-line)
                                                      (point)))))))
      (let* ((buf (current-buffer))
             (vterm-buffer
              (or (and (buffer-live-p vterm-execute-buffer) vterm-execute-buffer)
                  (if-let ((vterm-buffers (match-buffers '(major-mode . vterm-mode))))
                      (if (= 1 (length vterm-buffers))
                          (car vterm-buffers)
                        (set (make-local-variable 'vterm-execute-buffer)
                             (get-buffer
                              (completing-read "Send command to shell: "
                                               (mapcar #'buffer-name vterm-buffers)
                                               nil t))))
                    (let ((default-directory (read-directory-name
                                              "Send command to new shell in directory: "
                                              default-directory nil t)))
                      (vterm))))))
        (display-buffer vterm-buffer t)
        (switch-to-buffer-other-window vterm-buffer)
        (vterm--goto-line -1)
        (message command)
        (vterm-send-string command)
        (vterm-send-return)
        (switch-to-buffer-other-window buf))))
  (use-package sh-script
    :bind (:map sh-mode-map
                (("C-x C-e" . vterm-execute-region-or-current-line)))))

#+END_SRC

** Putting it all together

#+NAME: init.el
#+BEGIN_SRC emacs-lisp :tangle init.el
;; This file is automatically generated from init.el.org. Don't make
;; changes to this file directly.

<<config>>
#+END_SRC
