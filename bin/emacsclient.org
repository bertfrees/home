* emacsclient

See also: [[file:~/src/github/bertfrees/home/.emacs.d/init.el.org][Emacs configuration in ~/.emacs.d]]

#+NAME: emacsclient
#+BEGIN_SRC clojure :tangle emacsclient :tangle-mode (identity #o755)
#!/usr/bin/env bb

;; This file is automatically generated from emacsclient.org. Don't
;; make changes to this file directly.

(require '[babashka.process :refer [sh]]
         '[babashka.fs :refer [cwd]]
         '[clojure.java.io :as io])

(let [server-running #(.exists (io/file (str (System/getProperty "java.io.tmpdir")
                                             "/emacs"
                                             (.trim  (:out (sh  {:out :string} "id -u bert")))
                                             "/server")))
      client "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"
      client (fn [& args] (:exit (apply sh {:out :inherit :err :inherit} client args)))
      home-dir (.getParentFile (.getParentFile (io/file *file*)))]
  (when (not (server-running))
    (when (not (= 0 (:exit (sh {:dir home-dir :out :inherit :err :inherit}
                               "bin/make" ".emacs.d/init.el"
                                          ".authinfo.gpg"
                                          "ssh"
                                          "git"
                                          "pass"
                                          "bitlbee"
                                          "offlineimap"
                                          "Dropbox/.apdisk" ;; for org-roam
                                          ))))
      (System/exit 1))
    (when (not (= 0 (:exit (sh {:out :inherit :err :inherit}
                               "/Applications/Emacs.app/Contents/MacOS/Emacs"
                               "--daemon"
                               "--init-directory" (.getAbsolutePath (io/file home-dir ".emacs.d"))
                               "--chdir" (cwd)))))
      (System/exit 1))
    (when (not (->> (repeatedly server-running)
                    (take 10)
                    (some true?)))
      (binding [*out* *err*]
        (println "Emacs server could not be started"))
      (System/exit 1)))
  (apply client *command-line-args*))
#+END_SRC
