* The top-level Makefile

~Makefile~ is responsible for generating all the necessary files from the source code.

** Use Clojure as shell language in Makefile through [[https://babashka.org/][Babashka]]

#+NAME: Makefile-bb
#+BEGIN_SRC makefile
SHELL := $(CURDIR)/.make/bb
.SHELLFLAGS :=

#+END_SRC

[[file:.make/bb][.make/bb]] is a wrapper script that removes backslashes at the end of lines, and downloads and
installs the ~bb~ executable to ~bin/~ if it is not present before executing it.

~.make/lib.clj~ contains a a library of helper functions:

#+NAME: lib.clj
#+BEGIN_SRC clojure :tangle .make/lib.clj
;; This file is automatically generated from Makefile.org. Don't make
;; changes to this file directly.

(ns lib
  (:require [babashka.process :refer [sh]]
            [babashka.fs :as fs]
            [clojure.java.io :as io]
            [clojure.string :as str])
  (:import [java.security MessageDigest]
           [java.nio.file Files]))

(defn check-sha256 [shasum file]
  (let [actual (str/join (map #(format "%02x" %)
                              (vec (.digest (MessageDigest/getInstance "SHA-256")
                                            (-> file .toPath Files/readAllBytes)))))]
    (= actual shasum)))

(defn chmod [mode file]
  (when-not (= 0 (:exit (sh "chmod" mode (.getAbsolutePath (io/file file)))))
    (System/exit 1)))

(defn git-checkout [recipe]
  (when (not (= 0 (:exit (sh {:out :inherit :err :inherit} "bin/make" "git"))))
    (System/exit 1))
  (when-not (= 0 (:exit (sh {:out :inherit
                             :err :inherit}
                            "make" "git")))
    (System/exit 1))
  (let [{url :url commit :commit target :target} recipe]
    (fs/create-dirs (.getParentFile (.getAbsoluteFile (io/file target))))
    (when-not (= 0 (:exit (sh {:out :inherit
                               :err :inherit}
                              "git" "clone" url target)))
      (System/exit 1))
    (when commit
      (System/exit (:exit (sh {:dir (.getParentFile target)
                               :out :inherit
                               :err :inherit}
                              "git" "checkout" commit))))))

(defn install [recipe]
  (condp contains? (:type recipe)
    #{:pkg
      :dmg} (let [url (:url recipe)
                  downloads-dir (io/file "Downloads")
                  file (io/file downloads-dir (.replaceAll url "^.+/([^/]+)$" "$1"))]
              (when-not (.exists file)
                (println "Downloading" url)
                (io/make-parents file)
                (when-not (= 0 (:exit (sh {:dir (.getParentFile file)
                                           :out :inherit
                                           :err :inherit}
                                          "curl" "-kLO" url))) ;; -k for --insecure
                  (binding [*out* *err*]
                    (println "Failed to download" url))
                  (System/exit 1)))
              (when-let [shasum (:sha256 recipe)]
                (when-not (check-sha256 shasum file)
                  (binding [*out* *err*]
                    (println "shasum does not match:" (.getAbsolutePath file)))
                  (System/exit 1)))
              (if (= (:type recipe) :pkg)
                (when-not (= 0 (:exit (sh "open" "-W" (.getPath file))))
                  (binding [*out* *err*]
                    (println "Failed to open:" (.getAbsolutePath file)))
                  (System/exit 1))))
    #{:brew} (let [brew-home (io/file (case (.trim (:out (sh "uname -m")))
                               "x86_64" "/usr/local"
                               "/opt/homebrew"))
                   brew (io/file brew-home "bin/brew")]
               (when-not (.exists brew)
                 (install {:type :pkg
                           :url "https://github.com/Homebrew/brew/releases/download/4.1.24/Homebrew-4.1.24.pkg"
                           :sha256 "96f6d030e353f5273e584ef6c27f0e03d3196156e8757a916b9ed7bdcd89da85"})
                 (when-not (.exists brew)
                   (binding [*out* *err*]
                     (println "Failed to install Homebrew"))
                   (System/exit 1)))
               (when-not (= 0 (:exit (sh {:out :inherit :err :inherit} brew "update")))
                 (binding [*out* *err*]
                   (println "Failed to update Homebrew"))
                 (System/exit 1))
               (when-not (and (or (not (:tap recipe))
                                  (= 0 (:exit (sh {:out :inherit :err :inherit} brew "tap" (:tap recipe)))))
                              (= 0 (:exit (apply sh {:out :inherit :err :inherit}
                                                 (remove nil? [brew "install"
                                                                    (when (:cask recipe) "--cask")
                                                                    (:formula recipe)])))))
                 (binding [*out* *err*]
                   (println "Failed to install" (:formula recipe)))
                 (System/exit 1)))
    (do
      (binding [*out* *err*]
        (println "Can not read recipe:" recipe))
      (System/exit 1))))
#+END_SRC

~.make/bb.edn~ makes sure that ~lib.clj~ is on the class path:

#+NAME: bb.edn
#+BEGIN_SRC clojure :tangle .make/bb.edn
;; This file is automatically generated from Makefile.org. Don't make
;; changes to this file directly.
{:paths ["."]}
#+END_SRC

To make sure that ~SHELL~ feature works well, we install the latest version of GNU Make:

#+NAME: Makefile-bb
#+BEGIN_SRC makefile
GMAKE=bin/make
ifeq ($(shell (print (.exists (io/file "$(GMAKE)")))), true)
ifneq ($(firstword $(sort $(MAKE_VERSION) 3.82)), 3.82)
ifneq ($(shell (require '[babashka.process :refer [sh]]) \
               (print (= 0 (:exit (sh {:err :inherit} "bin/bb --config $(CURDIR)/.make/bb.edn $(GMAKE) --version"))))), true)
$(error "GNU Make 3.82 is required to run this script and could not be installed automatically. Please install it manually.")
endif
$(error "GNU Make 3.82 is required to run this script. Please restart shell and try again.")
endif
endif

#+END_SRC

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
Makefile : $(GMAKE) .zshrc .bashrc
WORGLE_FILES += $(GMAKE)
.PHONY : make
make : $(GMAKE)
$(BREW_HOME)/bin/gmake :
	(require '[lib :refer [install]])         \
	(install {:type :brew :formula "make"})

#+END_SRC

** Use [[https://github.com/paulbatchelor/worgle][Worgle]] for literate programming

Like ~Makefile~, most of the the source code is embedded within .org files. ~bin/worgle~ is used
to tangle .org files without depending on Emacs and much faster than Emacs can do it.

#+NAME: Makefile-worgle-Makefile
#+BEGIN_SRC makefile
Makefile : .make/bb.edn .make/lib.clj
Makefile .make/bb.edn .make/lib.clj : Makefile.org | bin/worgle
	(require '[babashka.process :refer [exec]]  \
	         '[babashka.fs :as fs])             \
	(fs/create-dirs "$(dir $@)")                \
	(exec "bin/worgle $<")

#+END_SRC

#+NAME: Makefile-worgle-other
#+BEGIN_SRC makefile
$(WORGLE_FILES) : % : %.org | bin/worgle
	(require '[babashka.process :refer [sh]]                                  \
	         '[babashka.fs :as fs]                                            \
	         '[lib :refer [chmod]])                                           \
	(fs/create-dirs "$(dir $@)")                                              \
	(let [worgle (.getAbsolutePath (io/file "bin/worgle"))]                   \
	  (when-not (= 0 (:exit (sh {:dir "$(dir $<)"} worgle "$(notdir $<)")))   \
	    (System/exit 1))                                                      \
	  #_(hack to support :tangle-mode)                                        \
	  (with-open [org-file (io/reader "$<")]                                  \
	    (when (some #(.contains % ":tangle-mode (identity #o755)")            \
	                (take 1 (filter #(.contains % ":tangle $(notdir $@)")     \
	                                (line-seq org-file))))                    \
	      (chmod "755" "$@"))))

#+END_SRC

The following part of the Makefile checks out the Worgle source code from Git and compiles and
installs it.

#+NAME: Makefile-build-worgle
#+BEGIN_SRC makefile
bin/worgle : bin/% : src/github/paulbatchelor/worgle/%
	(require '[babashka.process :refer [exec]])  \
	(exec "cp $< $@")

src/github/paulbatchelor/worgle/worgle : % : %.c
	(require '[babashka.process :refer [exec sh]])                              \
	(when-not (= 0 (:exit (sh {:dir "$(dir $<)"} "$(MAKE)"))) (System/exit 1))

src/github/paulbatchelor/worgle/worgle.c : | src/github/paulbatchelor/worgle

src/github/paulbatchelor/worgle :
	(require '[babashka.process :refer [sh]]                                                        \
	         '[babashka.fs :as fs])                                                                 \
	(fs/create-dirs (.getParentFile (.getAbsoluteFile (io/file "$@"))))                             \
	(when-not (= 0 (:exit (sh "git clone https://github.com/PaulBatchelor/worgle.git $@")))         \
	  (System/exit 1))                                                                              \
	(System/exit (:exit (sh {:dir "$@"} "git checkout 31787a97670c3ac6c07b3583a91e19df724c8dc3")))

#+END_SRC

** Homebrew

#+NAME: Makefile-homebrew
#+BEGIN_SRC makefile
BREW_HOME := $(shell (require '[babashka.process :refer [sh]])      \
                     (println (case (.trim (:out (sh "uname -m")))  \
                                "x86_64" "/usr/local"               \
                                         "/opt/homebrew")))

BREW := $(BREW_HOME)/bin/brew
.PHONY : brew
brew : $(BREW)
$(BREW) :
	(require '[lib :refer [install]])                                                               \
	(install {:type :pkg                                                                            \
	          :url "https://github.com/Homebrew/brew/releases/download/4.1.24/Homebrew-4.1.24.pkg"  \
	          :sha256 "96f6d030e353f5273e584ef6c27f0e03d3196156e8757a916b9ed7bdcd89da85"})          \
	(when-not (.exists (io/file "$@"))                                                              \
	  (System/exit 1))

#+END_SRC

** Other recipes

*** Emacs

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
EMACS := bin/emacs
WORGLE_FILES += $(EMACS) .emacs.d/init.el
.PHONY : emacs
emacs : $(EMACS)
$(EMACS) : /Applications/Emacs.app/Contents/MacOS/Emacs .emacs.d/init.el
/Applications/Emacs.app/Contents/MacOS/Emacs :
	(require '[lib :refer [install]])                                                       \
	(install {:type :dmg                                                                    \
	          :url "https://emacsformacosx.com/emacs-builds/Emacs-29.1-1-universal.dmg"     \
	          :sha256 "cde5e5802a1954f987c05c15577e5d6281ff738bd7bc256d86be6a00f297da70"})

#+END_SRC

*** Zsh

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
WORGLE_FILES += .zshrc
.PHONY : zsh
zsh : .zshrc
	(require '[babashka.process :refer [exec sh]])  \
	(let [zsh (.trim (:out (sh "which zsh")))]      \
	  (when-not (= zsh (System/getenv "SHELL"))     \
	    (exec "chsh" "-s" zsh)))

#+END_SRC

*** Bash

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
WORGLE_FILES += .bashrc

#+END_SRC

*** Git

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
.PHONY : git
git : | ssh
	(require '[babashka.process :refer [exec sh]])                      \
	(let [initial-url "https://github.com/bertfrees/home.git"           \
	      current-url (.trim (:out (sh "git remote get-url origin")))   \
	      ssh-url     "git@github.com:bertfrees/home.git"]              \
	  (if (= current-url initial-url)                                   \
	    (exec "git" "remote" "set-url" "origin" ssh-url initial-url)))

#+END_SRC

*** SSH

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
.PHONY : ssh
ssh : .ssh/config .ssh/gmail_rsa .ssh/gmail_rsa.pub
	(require '[babashka.process :refer [exec]])                \
	(exec "ssh-add" "--apple-use-keychain" ".ssh/gmail_rsa")

.ssh/config .ssh/gmail_rsa .ssh/gmail_rsa.pub : % : Dropbox/config/%
	(require '[babashka.process :refer [sh]]   \
	         '[babashka.fs :as fs]             \
	         '[lib :refer [chmod]])            \
	(fs/create-dirs "$(dir $@)")               \
	(when-not (= 0 (:exit (sh "cp $< $@")))    \
	  (System/exit 1))                         \
	(chmod "600" "$@")

Dropbox/config/.ssh/config Dropbox/config/.ssh/gmail_rsa Dropbox/config/.ssh/gmail_rsa.pub : | Dropbox/.apdisk

#+END_SRC

*** GnuPG

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
GPG := $(BREW_HOME)/bin/gpg
.PHONY : gnupg gpg
gnupg gpg : $(GPG) .gnupg/secring.gpg
$(GPG) :
	(require '[lib :refer [install]])        \
	(install {:type :brew :formula "gnupg"})

.gnupg/secring.gpg : % : Dropbox/config/%
	(require '[babashka.process :refer [exec]]  \
	         '[babashka.fs :as fs])             \
	(fs/create-dirs "$(dir $@)")                \
	(exec "cp $< $@")

Dropbox/config/.gnupg/secring.gpg : | Dropbox/.apdisk

#+END_SRC

*** encfs

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
ENCFS := $(BREW_HOME)/bin/encfs
.PHONY : encfs
encfs : $(ENCFS)
$(ENCFS) :
	(require '[lib :refer [install]])                                 \
	(install {:type :brew :cask true :formula "macfuse"})             \
	(install {:type :brew :tap "gromgit/fuse" :formula "encfs-mac"})

#+END_SRC

*** password-store

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
PASS := $(BREW_HOME)/bin/pass
PASSWORD_STORE := src/github/bertfrees/password-store

.PHONY : pass password-store
pass password-store : $(PASS) $(PASSWORD_STORE)/.gpg-id
$(PASS) : | gnupg
	(require '[lib :refer [install]])        \
	(install {:type :brew :formula "pass"})

$(PASSWORD_STORE)/.gpg-id :
	(require '[lib :refer [git-checkout]])                             \
	(git-checkout {:url "git@github.com:bertfrees/password-store.git"  \
	               :target "$(dir $@)"})

#+END_SRC

*** Dropbox

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
DROPBOX := /Applications/Dropbox.app/Contents/MacOS/Dropbox
.PHONY : dropbox
dropbox : $(DROPBOX)
	(require '[babashka.process :refer [exec]]                      \
	         '[clojure.java.io :as io])                             \
	(when (not (.exists (io/file "._dropbox/Dropbox/.encrypted")))  \
	  (binding [*out* *err*]                                        \
	    (println "Dropbox not set up correctly"))                   \
	  (System/exit 1))                                              \
	(exec "open" "-n" "/Applications/Dropbox.app")
$(DROPBOX) :
	(require '[lib :refer [install]])                      \
	(install {:type :brew :cask true :formula "dropbox"})

Dropbox/.apdisk : | $(DROPBOX) $(ENCFS)
	(require '[babashka.process :refer [exec]]                                                       \
	         '[babashka.fs :as fs])                                                                  \
	(fs/create-dirs "$(dir $(dir $@))")                                                              \
	(exec "$(ENCFS) $(CURDIR)/._dropbox/Dropbox/.encrypted $(CURDIR)/$(dir $@) -o volname=Dropbox")

#+END_SRC

*** Docker

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
DOCKER := $(BREW_HOME)/bin/docker
.PHONY : docker
docker : $(DOCKER)
$(DOCKER) :
	(require '[lib :refer [install]])                     \
	(install {:type :brew :cask true :formula "docker"})

#+END_SRC

*** Karabiner-Elements

See [[file:.config/karabiner/karabiner.json.org][Karabiner-Elements configuration]]

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
WORGLE_FILES += .config/karabiner/karabiner.json
KARABINER := /Applications/Karabiner-Elements.app/Contents/MacOS/Karabiner-Elements
.PHONY : karabiner
karabiner : $(KARABINER) .config/karabiner/karabiner.json
	(require '[babashka.process :refer [exec]])                \
	(exec "open" "-n" "/Applications/Karabiner-Elements.app")
$(KARABINER) :
	(require '[babashka.process :refer [exec]]                        \
	         '[lib :refer [install]])                                 \
	(install {:type :brew :cask true :formula "karabiner-elements"})

#+END_SRC

*** iTerm2

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
ITERM2 := /Applications/iTerm.app/Contents/MacOS/iTerm2
.PHONY : iterm iterm2
iterm iterm2 : $(ITERM2)
$(ITERM2) :
	(require '[lib :refer [install]])                     \
	(install {:type :brew :cask true :formula "iterm2"})

#+END_SRC

*** Amethyst

#+NAME: Makefile-recipes
#+BEGIN_SRC makefile
AMETHYST := /Applications/Amethyst.app/Contents/MacOS/Amethyst
.PHONY : amethyst
amethyst : $(AMETHYST)
$(AMETHYST) :
	(require '[lib :refer [install]])                       \
	(install {:type :brew :cask true :formula "amethyst"})

#+END_SRC

** Putting it all together

#+NAME: Makefile
#+BEGIN_SRC makefile :tangle Makefile
# This file is automatically generated from Makefile.org. Don't make
# changes to this file directly and don't commit any changes.

<<Makefile-bb>>
<<Makefile-worgle-Makefile>>
<<Makefile-build-worgle>>
<<Makefile-homebrew>>
<<Makefile-recipes>>
<<Makefile-worgle-other>>
#+END_SRC
